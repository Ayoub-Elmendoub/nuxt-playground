/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/config": {
  };
  "/user": {
  };
  "/user/{userId}/verify/{verificationKey}": {
  };
  "/user/forgot": {
  };
  "/user/{userId}/reset/{resetKey}": {
  };
  "/user/auth/login": {
  };
  "/user/auth/google": {
  };
  "/user/auth/facebook": {
  };
  "/user/{userId}": {
  };
  "/user/{userId}/secure": {
  };
  "/user/auth/logout": {
  };
  "/user/{userId}/device": {
  };
  "/blog/post": {
  };
  "/blog/post/{postId}": {
  };
  "/blog/post/{postId}/comment": {
  };
  "/blog/post/{postId}/comment/{commentId}": {
  };
  "/{size}/smart/{imageUrl}": {
  };
  "/media/{image}": {
  };
  "/health": {
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export interface external {
  "components/callbacks.yaml": unknown
  "components/examples.yaml": unknown
  "components/headers.yaml": unknown
  "components/index.yaml": unknown
  "components/links.yaml": unknown
  "components/parameters.yaml": unknown
  "components/requestBodies.yaml": unknown
  "components/responses.yaml": unknown
  "components/schemas/Comment.yaml": unknown
  "components/schemas/Config.yaml": unknown
  "components/schemas/defaults.yaml": unknown
  "components/schemas/Error.yaml": unknown
  "components/schemas/Health.yaml": unknown
  "components/schemas/index.yaml": unknown
  "components/schemas/Post.yaml": unknown
  "components/schemas/User.yaml": unknown
  "components/securitySchemes.yaml": unknown
  "defaults/info.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: Record<string, never>;
  };
  "defaults/security.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: Record<string, never>;
  };
  "defaults/servers.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: Record<string, never>;
  };
  "defaults/tags.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: Record<string, never>;
  };
  "paths/blog.yaml": {
    paths: {
      "/blog/post": {
        /**
         * Get blog posts 
         * @description Get posts list with filtering and pagination
         */
        get: operations["getPosts"];
        /**
         * Create post 
         * @description Create a new post to a blog with uploading images
         */
        post: operations["createPost"];
        
      };
      "/blog/post/{postId}": {
        /**
         * Get post 
         * @description Get one post from blog
         */
        get: operations["getPost"];
        /**
         * Update post 
         * @description Change post details
         */
        put: operations["updatePost"];
        /**
         * Remove post 
         * @description Remove post from blog
         */
        delete: operations["deletePost"];
        
      };
      "/blog/post/{postId}/comment": {
        /**
         * Get comments 
         * @description Get list of comments that belongs to a post
         */
        get: operations["getComments"];
        /**
         * Create comment 
         * @description Create a new comment
         */
        post: operations["createComment"];
        
      };
      "/blog/post/{postId}/comment/{commentId}": {
        /**
         * Update comment 
         * @description Change comment details
         */
        put: operations["updateComment"];
        /**
         * Remove comment 
         * @description Remove a specific comment
         */
        delete: operations["deleteComment"];
        
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: never;
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
  };
  "paths/config.yaml": {
    paths: {
      "/config": {
        /**
         * Initial endpoint 
         * @description Get basic configurations, also check for updates on mobile clients.
         */
        get: operations["getConfig"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: never;
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
  };
  "paths/health.yaml": {
    paths: {
      "/health": {
        /**
         * Health check 
         * @description Get detailed info about server health status.
         */
        get: operations["getHealth"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: never;
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
  };
  "paths/media.yaml": {
    paths: {
      "/{size}/smart/{imageUrl}": {
        /**
         * Image proxy 
         * @description Image proxy service (like imgproxy, Thumbor etc.).
         * Provides on-demand crop, resizing and flipping of images and caching of them.
         * Check docs of service for detailed documentation.
         */
        get: {
          parameters: {
            path: {
              /** @description Image size */
              size: string;
              /** @description Url of raw image to manipulate. */
              imageUrl: string;
            };
          };
          responses: {
            /** @description Successful operation */
            200: {
              content: {
                "image/jpeg": string;
                "image/png": string;
              };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            default: components["responses"]["Unexpected"];
          };
        };
      };
      "/media/{image}": {
        /**
         * Get Image 
         * @description Get raw image from media service
         */
        get: operations["getImage"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: never;
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
  };
  "paths/user.yaml": {
    paths: {
      "/user": {
        /**
         * Register user 
         * @description Start user registration process.
         */
        post: operations["createUser"];
      };
      "/user/{userId}/verify/{verificationKey}": {
        /**
         * Verify user 
         * @description User e-mail verification.
         */
        post: operations["verifyUser"];
      };
      "/user/forgot": {
        /**
         * Request password reset 
         * @description Initiate a password reset flow.
         */
        post: operations["forgotPassword"];
      };
      "/user/{userId}/reset/{resetKey}": {
        /**
         * Reset password 
         * @description Create new password with reset key.
         */
        post: operations["resetPassword"];
      };
      "/user/auth/login": {
        /**
         * Login with username and password 
         * @description Login with credentials passed with basic auth.
         */
        post: operations["login"];
      };
      "/user/auth/google": {
        /**
         * Google Sign-in 
         * @description Login with Google, 
         * More details: https://developers.google.com/identity/sign-in/web/backend-auth
         */
        post: operations["loginGoogle"];
      };
      "/user/auth/facebook": {
        /**
         * Facebook Sign-in 
         * @description Login with Facebook, 
         * More details: https://developers.facebook.com/docs/facebook-login/access-tokens/
         */
        post: operations["loginFacebook"];
      };
      "/user/{userId}": {
        /**
         * Get user details 
         * @description Get user & basic settings info
         */
        get: operations["getUser"];
        /**
         * Update user details 
         * @description Change user basic settings (not the secure parts)
         */
        put: operations["upadateUser"];
        
      };
      "/user/{userId}/secure": {
        /**
         * Update secure user details 
         * @description Change user secure settings (e.g. change password)
         */
        put: operations["upadateUserSecure"];
      };
      "/user/auth/logout": {
        /**
         * Logout 
         * @description Logout current user
         */
        post: operations["logout"];
      };
      "/user/{userId}/device": {
        /**
         * Register user's device 
         * @description Register new device token for push notification
         */
        post: {
          requestBody: {
            content: {
              "application/json": components["schemas"]["Device"];
            };
          };
          responses: {
            /** @description Device created */
            201: never;
            401: components["responses"]["Unauthorized"];
            default: components["responses"]["Unexpected"];
          };
        };
        
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: never;
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
  };
}

export interface operations {

  /**
   * Get blog posts 
   * @description Get posts list with filtering and pagination
   */
  getPosts: {
    responses: {
      /** @description Post objects */
      200: {
        content: {
          "application/json": (components["schemas"]["Post"])[];
        };
      };
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Create post 
   * @description Create a new post to a blog with uploading images
   */
  createPost: {
    /** @description Post to create */
    requestBody: {
      content: {
        "multipart/form-data": {
          post?: components["schemas"]["PostDetailed"];
          filename?: (string)[];
        };
      };
    };
    responses: {
      /** @description Created post object */
      201: {
        content: {
          "application/json": components["schemas"]["PostDetailed"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Get post 
   * @description Get one post from blog
   */
  getPost: {
    responses: {
      /** @description Post object */
      200: {
        content: {
          "application/json": components["schemas"]["PostDetailed"];
        };
      };
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Update post 
   * @description Change post details
   */
  updatePost: {
    /** @description Post to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostDetailed"];
      };
    };
    responses: {
      /** @description Post object */
      200: {
        content: {
          "application/json": components["schemas"]["PostDetailed"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Remove post 
   * @description Remove post from blog
   */
  deletePost: {
    responses: {
      /** @description Removed */
      204: never;
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Get comments 
   * @description Get list of comments that belongs to a post
   */
  getComments: {
    responses: {
      /** @description Comment objects */
      200: {
        content: {
          "application/json": (components["schemas"]["Comment"])[];
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Create comment 
   * @description Create a new comment
   */
  createComment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Comment"];
      };
    };
    responses: {
      /** @description Created comment object */
      201: never;
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Update comment 
   * @description Change comment details
   */
  updateComment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Comment"];
      };
    };
    responses: {
      /** @description Comment object */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Remove comment 
   * @description Remove a specific comment
   */
  deleteComment: {
    responses: {
      /** @description Removed */
      204: {
        content: {
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Initial endpoint 
   * @description Get basic configurations, also check for updates on mobile clients.
   */
  getConfig: {
    parameters: {
      query: {
        /** @description Version of the web or mobile client. */
        version: string;
        /** @description Client platform. */
        platform: "Web" | "iOS" | "Android";
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Config"];
        };
      };
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Health check 
   * @description Get detailed info about server health status.
   */
  getHealth: {
    parameters: {
      query: {
        /** @description Secure key for accessing health info */
        secure?: string;
      };
    };
    responses: {
      /** @description Service Healthy */
      200: {
        content: {
          "application/json": components["schemas"]["Health"];
        };
      };
      /** @description Service Unhealthy */
      503: {
        content: {
          "application/json": components["schemas"]["Health"];
        };
      };
    };
  };
  /**
   * Get Image 
   * @description Get raw image from media service
   */
  getImage: {
    parameters: {
      path: {
        /** @description filename */
        image: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "image/jpeg": string;
          "image/png": string;
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Register user 
   * @description Start user registration process.
   */
  createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRegistration"];
      };
    };
    responses: {
      /** @description Successful pre-registration */
      201: {
        content: {
        };
      };
      409: components["responses"]["Conflict"];
      422: components["responses"]["InvalidValue"];
      429: components["responses"]["TooMany"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Verify user 
   * @description User e-mail verification.
   */
  verifyUser: {
    parameters: {
      path: {
        verificationKey: string;
      };
    };
    responses: {
      /** @description Successful verification */
      200: {
        content: {
        };
      };
      422: components["responses"]["InvalidValue"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Request password reset 
   * @description Initiate a password reset flow.
   */
  forgotPassword: {
    requestBody: {
      content: {
        "application/json": {
          email?: string;
        };
      };
    };
    responses: {
      /** @description Successful password change request */
      200: {
        content: {
        };
      };
      429: components["responses"]["TooMany"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Reset password 
   * @description Create new password with reset key.
   */
  resetPassword: {
    parameters: {
      path: {
        resetKey: string;
      };
    };
    /** @description New password */
    requestBody: {
      content: {
        "application/json": {
          password?: string;
        };
      };
    };
    responses: {
      /** @description Successful password change */
      200: {
        content: {
        };
      };
      422: components["responses"]["InvalidValue"];
      429: components["responses"]["TooMany"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Login with username and password 
   * @description Login with credentials passed with basic auth.
   */
  login: {
    responses: {
      /** @description Successful login, access token */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      422: components["responses"]["InvalidValue"];
      429: components["responses"]["TooMany"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Google Sign-in 
   * @description Login with Google, 
   * More details: https://developers.google.com/identity/sign-in/web/backend-auth
   */
  loginGoogle: {
    requestBody: {
      content: {
        "application/json": {
          id_token?: string;
        };
      };
    };
    responses: {
      /** @description Successful login, access token */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Facebook Sign-in 
   * @description Login with Facebook, 
   * More details: https://developers.facebook.com/docs/facebook-login/access-tokens/
   */
  loginFacebook: {
    requestBody: {
      content: {
        "application/json": {
          user_id?: string;
          access_token?: string;
        };
      };
    };
    responses: {
      /** @description Successful login, access token */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Get user details 
   * @description Get user & basic settings info
   */
  getUser: {
    responses: {
      /** @description UserDetailed object */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"];
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Update user details 
   * @description Change user basic settings (not the secure parts)
   */
  upadateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDetailed"];
      };
    };
    responses: {
      /** @description UserDetailed object */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"];
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Update secure user details 
   * @description Change user secure settings (e.g. change password)
   */
  upadateUserSecure: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDetailed"];
      };
    };
    responses: {
      /** @description UserDetailed object */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"];
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
  /**
   * Logout 
   * @description Logout current user
   */
  logout: {
    responses: {
      /** @description Successful logout */
      200: {
        content: {
        };
      };
      401: components["responses"]["Unauthorized"];
      default: components["responses"]["Unexpected"];
    };
  };
}
